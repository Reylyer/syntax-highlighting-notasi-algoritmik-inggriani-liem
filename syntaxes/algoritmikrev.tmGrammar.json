{
    "scopeName" : "source.algoritmik",
    "patterns" : [
        { "include": "#main"}
    ],
    "repository" : {
        "main" : {
            "patterns" : [
                { "include": "#program-section"},
                { "include": "#function-procedure-section"},
                { "include": "#kamus-section"},
                { "include": "#algoritma-section"},
                { "include": "#comment"}
                
            ]
        },
        "comment" : {
            "begin": "\\{",
            "end": "\\}",
            "name" : "comment.block.algoritmik",
            "beginCaptures": {
                "0": { "name": "punctuation.curlp.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.curlp.close" }
            }
        },

        "program-section" : {
            "patterns": [
                { "include": "#program-line" }
            ],
            "repository": {
                "program-line" : {
                    "begin" : "(?i)program(?-i)",
                    "end"   : "\\n",
                    "name" : "program-line.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "keyword.control.program.algoritmik" }
                    },
                    "endCaptures": {
                        "0": { "name": "null" }
                    },
                    "patterns": [
                        { "include": "#comment" },
                        { "include": "#program-name" }
                    ]
                },
                "program-name" : {
                    "match" : "[_a-zA-Z][_a-zA-Z0-9]*(?=\\b)",
                    "name" : "entity.name.function.program.algoritmik"
                }
            }
        },

        "function-procedure-section" : {
            "patterns": [
                { "include": "#function-line" },
                { "include": "#procedure-line"}
            ],
            "repository": {
                "function-line" : {
                    "begin" : "(?i)function(?-i)",
                    "end"   : "\\n",
                    "name" : "function-line.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "keyword.control.function.algoritmik" }
                    },
                    "patterns": [
                        { "include": "#comment"},
                        { "include": "#primitive-datatype"},
                        { "include": "#function-procedure-name" },
                        { "include": "#parameter-formal-function"},
                        { "include": "#function-return-operator"},
                        { "include": "#function-return-datatype"}
                    ]
                },
                "procedure-line" : {
                    "begin" : "(?i)procedure(?-i)",
                    "end"   : "\\n",
                    "name" : "procedure-line.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "keyword.control.function.algoritmik" }
                    },
                    "patterns": [
                        { "include": "#comment"},
                        { "include": "#function-procedure-name" },
                        { "include": "#parameter-formal-procedure"}
                    ]
                },
                "function-procedure-name" : {
                    "match" : "[_a-zA-Z][_a-zA-Z0-9]*(?=\\s*?\\()",
                    "name" : "entity.name.function.algoritmik"
                },

                "parameter-formal-function" : {
                    "begin" : "\\(",
                    "end" : "\\)",
                    "name": "parameter-formal-function.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "punctuation.parameter.parent.open.algoritmik" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.parameter.parent.close.algoritmik" }
                    },
                    "patterns" : [
                        { "include": "#parameter-name"},
                        { "include": "#primitive-datatype"},
                        { "include": "#parameter-datatype"}

                    ]
                },

                "parameter-formal-procedure" : {
                    "begin" : "\\(",
                    "end" : "\\)",
                    "name": "parameter-formal-procedure.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "punctuation.parameter.parent.open.algoritmik" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.parameter.parent.close.algoritmik" }
                    },
                    "patterns" : [
                        { "include": "#parameter-procedure-name"},
                        { "include": "#parameter-procedure-input-output"},
                        { "include": "#primitive-datatype"},
                        { "include": "#parameter-procedure-datatype"}

                    ]
                },
                
                "parameter-procedure-input-output": {
                    "match" : "(?<=\\s*?)(input|output)(?=\\s*?)",
                    "name": "support.procedure-input-output.algoritmik"
                },
                "parameter-procedure-name" : {
                    "match" : "(?<=\\s*?)[_a-zA-Z][_a-zA-Z0-9]*?(?=\\s*?(\\:))",
                    "name" : "variable.parameter.procedure.algoritmik"
                },
                "parameter-procedure-datatype": {
                    "match" : "(?<=\\:\\s*?)[_a-zA-Z][_a-zA-Z0-9]+(?=\\s*?(\\)|\\,))",
                    "name": "support.type.procedure.algoritmik"
                },
                "parameter-name" : {
                    "match" : "(?<=[\\(\\,]\\s*?)[_a-zA-Z][_a-zA-Z0-9]*?(?=\\s*?(\\:|\\,))",
                    "name" : "variable.parameter.function.algoritmik"
                },
                "parameter-datatype": {
                    "match" : "(?<=\\:\\s*?)[_a-zA-Z][_a-zA-Z0-9]+(?=\\s*?(\\)|\\,))",
                    "name": "support.type.parameter.algoritmik"
                },
                "function-return-operator" : {
                    "match" : "\\-+?\\>",
                    "name": "keyword.operator.return.algoritmik"
                },
                "function-return-datatype" : {
                    "match" : "(?<=\\-+?\\>\\s*?)[_a-zA-Z][_a-zA-Z0-9]*",
                    "name": "support.type.return.algoritmik"
                }
            }
        },

        "kamus-section" : {
 
            "patterns": [
                { "include": "#kamus-block"}
            ],
            "repository" : {
                "kamus-block": {
                    "begin" : "(?i)(kamus lokal|kamus)(?-i)",
                    "end" : "\\b(?=(?i)algoritma(?-i))",
                    "name": "block.kamus.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "keyword.control.kamus.algoritmik" }
                    },
                    "patterns" : [
                        { "include": "#primitive-datatype"},
                        { "include": "#comment"},
                        { "include": "#variable-declaration"},
                        { "include": "#variable-datatype"},
                        { "include": "#operator-declaration"}
                    ]
                },
                "variable-declaration" : {
                    "match": "(?<=\\s*)[_a-zA-Z][_a-zA-Z0-9]*?(?=\\s*?(\\:|\\,))",
                    "name": "variable.other.local.declaration.algoritmik"
                },
                "variable-datatype": {
                    "match" : "(?<=\\:\\s*?)[_a-zA-Z][_a-zA-Z0-9]+(?=\\W)",
                    "name": "support.type.declaration.algoritmik"
                },
                "operator-declaration": {
                    "match" : "\\:",
                    "name" : "keyword.operator.declaration.algoritmik"
                }
                
            }
            
        },
        "algoritma-section": {
            "patterns": [
                { "include": "#algoritma-block"}
            ],
            "repository" : {
                "algoritma-block": {
                    "begin" : "(?i)algoritma(?-i)",
                    "end" : "\\b(?=(?i)(procedure|function|program)(?-i))",
                    "name": "block.algoritma.algoritmik",
                    "beginCaptures": {
                        "0": { "name": "keyword.control.algoritma.algoritmik" }
                    },
                    "patterns" : [
                        { "include": "#comment"},
                        { "include": "#operator-assignment"},
                        { "include": "#operator-bitwise"},
                        { "include": "#operator-comparator"},
                        { "include": "#operator-arithmetic"},
                        { "include": "#control-flow"},
                        { "include": "#control-loop"},
                        { "include": "#control-return"},
                        { "include": "#constant-boolean"},
                        { "include": "#constant-number"},
                        { "include": "#builtin-function"}
                    ]
                },
                "operator-assignment": {
                    "match" : "\\<\\-+",
                    "name" : "keyword.operator.assignment.algoritmik"
                },
                "operator-bitwise": {
                    "match" : "(?i)(not|and|or|xor|nor|nand)(?-i)",
                    "name" : "keyword.operator.bitwise.algoritmik"
                },
                "operator-comparator": {
                    "match" : "\\<|\\>|\\=|\\!",
                    "name" : "keyword.operator.comparator.algoritmik"
                },
                "operator-arithmetic": {
                    "match" : "(?<=\\b|\\s)(\\+|\\-|\\/|mod|div)(?=\\b|\\s)",
                    "name" : "keyword.operator.arithmetic.algoritmik"
                },
                "control-flow" : {
                    "match" : "if|then|else|depend on",
                    "name" : "keyword.control.flow.algoritmik"
                },
                "control-loop" : {
                    "match" : "traversal|repeat|until|while|do|iterate|stop",
                    "name" : "keyword.control.loop.algoritmik"
                },
                "control-return" : {
                    "match" : "\\-+\\>",
                    "name" : "keyword.control.return.algoritmik"
                },
                "builtin-function" : {
                    "match" : "output|input",
                    "name" : "support.function.builtin.algoritmik"
                }
            }
        },

        "primitive-datatype": {
            "match" : "integer|boolean|real|character|array", 
            "name" : "storage.type.primitive.algoritmik"
        },
        "constant-boolean": {
            "match": "false|true",
            "name" : "constant.boolean.algoritmik"
        },
        "constant-number": {
            "match": "\\b[+-]?([0-9]*[.])?[0-9]+\\b",
            "name" : "constant.number.algoritmik"
        }
    }
}