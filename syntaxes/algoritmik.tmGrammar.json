{
    "scopeName": "source.algoritmik",
    "patterns": [
        { "include": "#main"}
    ],
    "repository": {
        "main": {
            "patterns": [
                { "include" : "#block"},
                { "include" : "#function-line"},
                { "include" : "#program-line"},
                { "include" : "#square"},
                { "include" : "#declaration-variable"},
                { "include" : "#conditional"},
                { "include" : "#loop"},
                { "include" : "#operator-annotation"},
                { "include" : "#operator-assignment"},
                { "include" : "#control-flow"},
                { "include" : "#operator-arithmetic"},
                { "include" : "#operator-compare"},
                { "include" : "#operator-bitwise"},
                { "include" : "#datatype"},
                { "include" : "#constants-boolean"},
                { "include" : "#constants-number"},
                { "include" : "#comment"}
            ]
        },
        "comment": {
            "begin": "\\{",
            "end": "\\}",
            "name" : "comment.block.algoritmik",
            "beginCaptures": {
                "0": { "name": "punctuation.curlp.open" }
            },
            "endCaptures": {
                "0": { "name": "punctuation.curlp.close" }
            },
            "patterns": [{ "include": "#main" }]
        },
        "block": {
            "match": "kamus lokal|kamus|algoritma",
            "name": "keyword.block.open.algoritmik"
        },
        "function-name": {
            "match": "[_a-zA-Z][_a-zA-Z0-9]*(?=(\\())",
            "name": "entity.name.function.algoritmik"
        },
        "program-name": {
            "match": "[_a-zA-Z][_a-zA-Z0-9]*(?=(\\s|\\n))",
            "name": "entity.name.function.program.algoritmik"
        },
        "square" : {
            "match": "\\[|\\]",
            "name": "meta.brace.square.algoritmik"
        },
        "function-line" : {
            "begin": "function|procedure",
            "end": "\\n|\\Z",
            "name" : "functionline.algoritmik",
            "beginCaptures": {
                "0": { "name": "storage.type.function.algoritmik" }
            },
            "endCaptures": {
                "0": { "name": "null" }
            },
            "patterns": [{ "include": "#function-name" }, { "include": "#comment" }]
        },
        "program-line" : {
            "begin": "program",
            "end": "\\n|\\Z",
            "name" : "programline.algoritmik",
            "beginCaptures": {
                "0": { "name": "storage.type.program.algoritmik" }
            },
            "endCaptures": {
                "0": { "name": "null" }
            },
            "patterns": [{ "include": "#program-name" }, { "include": "#comment" }]
        },
        "datatype": {
            "match": "integer|boolean|real|character|array",
            "name": "storage.type.primitive.algoritmik"
        },
        "conditional": {
            "match": "if|then|depends on|else",
            "name": "keyword.control.conditional.algoritmik"
        },
        "loop": {
            "match": "traversal|iterate|stop|repeat|until|while|do",
            "name": "keyword.control.loop.algoritmik"
        },
        "operator-annotation": {
            "match": ":",
            "name": "keyword.operator.type.annotation.algoritmik"
        },
        "operator-assignment": {
            "match": "<-{1,2}",
            "name": "keyword.operator.type.assignment.algoritmik"
        },
        "control-flow": {
            "match": "-{1,2}>",
            "name": "keyword.control.type.flow.algoritmik"
        },
        "operator-arithmetic": {
            "match": "((\\+|\\-|\\/|\\*)|\\s(mod|div)\\s)",
            "name" : "keyword.operator.type.arithmetic.algoritmik"
        },
        "operator-compare": {
            "match": "\\>\\=|\\<\\=|\\<|\\>|\\=",
            "name" : "keyword.operator.type.compare.algoritmik"
        },
        "operator-bitwise": {
            "match": "\\s(not|and|or|xor)\\s",
            "name" : "keyword.operator.type.bitwise.algoritmik"
        },
        "constants-boolean": {
            "match": "\\s\\K(false|true)(?=\\s)",
            "name" : "constant.language.boolean.algoritmik"
        },
        "constants-number": {
            "match": "\\s[+-]?([0-9]*[.])?[0-9]+\\s",
            "name" : "constant.language.number.algoritmik"
        }
    }
}